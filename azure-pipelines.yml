# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:22
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

variables:
  # Container registry service connection established during pipeline creation // 'dvue2-acr-evue2dsoacr-sc'
  dockerRegistryServiceConnection:  'dvue-acr-evuedsoacr-sc'
  # e.g.  nginx
  imageRepository: 'ava/guoyang/test/test-python-django'
  containerRegistry: 'evuedsoacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  k8sServiceConnection: 'k8s_connection_dvueappaks2'
  k8sNamespace: 'pipeline-dev'
  k8sImagePullSecrets: 'pipeline-deploy'
  tag: '$(Build.BuildId)'


pool:
  vmImage: 'Ubuntu 18.04'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.9
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel django
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  condition: succeededOrFailed()
  displayName: 'Run tests'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'

- task: Docker@2
  displayName: Build an image
  inputs:
    repository: $(containerRegistry)/$(imageRepository)
    command: build
    Dockerfile: ./Dockerfile

- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: $(dockerRegistryServiceConnection)

- task: Docker@2
  displayName: Push image
  inputs:
    containerRegistry: $(dockerRegistryServiceConnection)
    repository: $(imageRepository)
    command: push
    tags: |
      $(tag)
- task: Docker@2
  displayName: Logout of ACR
  inputs:
    command: logout
    containerRegistry: $(dockerRegistryServiceConnection)